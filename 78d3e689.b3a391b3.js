(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{63:function(e,s,t){"use strict";t.r(s),t.d(s,"frontMatter",(function(){return l})),t.d(s,"metadata",(function(){return i})),t.d(s,"rightToc",(function(){return c})),t.d(s,"default",(function(){return u}));var n=t(2),a=t(6),o=(t(0),t(80)),l={id:"pseudo-classes",title:"Pseudo Classes"},i={unversionedId:"pseudo-classes",id:"pseudo-classes",isDocsHomePage:!1,title:"Pseudo Classes",description:"Pseudo classes are styling flags that allow you to add optional styling to your classes. Each pseudo class is also a rule to select any element that has been given that pseudo class. For example, when a button is pressed.",source:"@site/docs\\pseudo-classes.md",slug:"/pseudo-classes",permalink:"/style-composer/docs/pseudo-classes",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/pseudo-classes.md",version:"current",sidebar:"someSidebar",previous:{title:"Style Rules",permalink:"/style-composer/docs/style-rules"},next:{title:"Dynamic Units",permalink:"/style-composer/docs/dynamic-units"}},c=[{value:"In-built Rules",id:"in-built-rules",children:[]},{value:"Demo",id:"demo",children:[]},{value:"Creating your own",id:"creating-your-own",children:[]}],r={rightToc:c};function u(e){var s=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},r,t,{components:s,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Pseudo classes are styling flags that allow you to ",Object(o.b)("strong",{parentName:"p"},"add optional styling")," to your classes. ",Object(o.b)("strong",{parentName:"p"},"Each pseudo class is also a rule")," to select any element that has been given that pseudo class. For example, when a button is pressed."),Object(o.b)("p",null,"There are two parts to using pseudo classes:"),Object(o.b)("p",null,"First, you must apply pseudo classes when conditions you want to style based upon are met. ",Object(o.b)("strong",{parentName:"p"},"No pseduo classes are applied automatically.")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx",metastring:"{6}","{6}":!0}),'import {disabled} from "style-composer";\n\nexport default function Form({isDisabled, children}) {\n    return <StyledView\n                classes={[$Form, $FieldGroup]}\n                pseudoClasses={[isDisabled && disabled]}\n            >\n        {children}\n    </StyledView>;\n}\n')),Object(o.b)("p",null,"Now, we can add styling that is only applied when ",Object(o.b)("inlineCode",{parentName:"p"},"isDisabled")," is truthy in a ",Object(o.b)("strong",{parentName:"p"},"generic way that can be re-used by multiple components"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js",metastring:"{6,7,8}","{6,7,8}":!0}),'import {disabled} from "style-composer";\n\nexport const $FieldGroup = composeClass("field-group", () => ({\n    padding: 10,\n\n    [disabled()]: {\n        opacity: 0.5,\n    }\n}));\n')),Object(o.b)("h2",{id:"in-built-rules"},"In-built Rules"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"active"),Object(o.b)("li",{parentName:"ul"},"disabled"),Object(o.b)("li",{parentName:"ul"},"focus")),Object(o.b)("h2",{id:"demo"},"Demo"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),'function Button({classes, children}) {\n    // NOTE: DO NOT define classes inside a component, this is merely for demonstration\n    const $Button = composeClass("button", () => ({\n        backgroundColor: "#673ab7",\n        color: "white",\n        padding: 10,\n        borderRadius: 30,\n        textAlign: "center",\n        width: 150,\n\n        [active()]:  {\n            backgroundColor: "#e91e63",\n        }\n    }));\n\n    const [isActive, setActive] = useState(false);\n\n    return <StyledTouchableOpacity\n                classes={[$Button, classes]}\n                pseudoClasses={[isActive && active]} // <-- adds active when isActive is true\n                activeOpacity={1}\n                onPressIn={() => setActive(true)}\n                onPressOut={() => setActive(false)}>\n        <StyledText>Press me!</StyledText>\n    </StyledTouchableOpacity>;\n}\n')),Object(o.b)("h2",{id:"creating-your-own"},"Creating your own"),Object(o.b)("p",null,"If you wished to add your own pseudo class rules for your app you can do so like this:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'import {createPseudoRule} from "style-composer";\n\nexport const hover = createPseudoRule("hover");\n')),Object(o.b)("p",null,"This will now work just the same as the in-built pseudo classes"))}u.isMDXComponent=!0}}]);